#!/bin/bash
# Screenshot: http://s.natalian.org/2013-08-17/dwm_status.png
# Network speed stuff stolen from http://linuxclues.blogspot.sg/2009/11/shell-script-show-network-speed.html

# This function parses /proc/net/dev file searching for a line containing $interface data.
# Within that line, the first and ninth numbers after ':' are respectively the received and transmited bytes.
function get_bytes {
# Find active network interface
interface=$(ip route get 8.8.8.8 2>/dev/null| awk '{print $5}')
line=$(grep $interface /proc/net/dev | cut -d ':' -f 2 | awk '{print "received_bytes="$1, "transmitted_bytes="$9}')
eval $line
now=$(date +%s%N)
}

# Function which calculates the speed using actual and old byte number.
# Speed is shown in KByte per second when greater or equal than 1 KByte per second.
# This function should be called each second.

function get_velocity {
value=$1
old_value=$2
now=$3

timediff=$(($now - $old_time))
velKB=$(echo "1000000000*($value-$old_value)/1024/$timediff" | bc)
if test "$velKB" -gt 1024
then
	echo $(echo "scale=2; $velKB/1024" | bc)mb/s
else
	echo ${velKB}kb/s
fi
}

# Get initial values
get_bytes
old_received_bytes=$received_bytes
old_transmitted_bytes=$transmitted_bytes
old_time=$now

print_volume() {
	volume="$(amixer get Master | tail -n1 | sed -r 's/.*\[(.*)%\].*/\1/')"
    onoffvolume="$(amixer get Master | tail -n1 |grep off)"
	if [[ "$volume" -gt 2 && -n "$onoffvolume" ]];
	then
		echo -e " 󰖁 "
	else
        echo -e "󰕾 ${volume}"
	fi
}

print_mic() {
	mic="$(amixer get Capture | tail -n1 | sed -r 's/.*\[(.*)%\].*/\1/')"
    onoffmic="$(amixer get Capture | tail -n1 |grep off)"
	if [[ "$mic" -gt 2 && -n "$onoffmic" ]];
	then
		echo -e "  "
	else
        echo -e " ${mic}"
	fi
}

print_wifi() {
  IP=$(ip route get 8.8.8.8 2>/dev/null|grep -Eo 'src [0-9.]+'|grep -Eo '[0-9.]+')
  
  if [[ $IP != '' ]]; then
    SSID=$(iwgetid -r)
    if [[ $SSID != '' ]]; then
      echo -e "   "
      else
    echo -e " 󰌗  "
    #echo -e " 󰈁 "
    fi
  else 
    echo -e " 󰌙  "
  fi
}

# print_temp(){
# 	test -f /sys/class/thermal/thermal_zone0/temp || return 0
# 	echo $(head -c 2 /sys/class/thermal/thermal_zone0/temp)C
# }
print_date(){
#dayOfMonth=$(date +%d)
## Choose postfix
#case "$dayOfMonth" in
#    1)
#    postfix="st"
#    ;;
#    2)
#    postfix="nd"
#    ;;
#    3)
#    postfix="rd"
#    ;;
#    *)
#    postfix="th"
#    ;;
#esac
#echo $(date +"%H:%M %b,%d$postfix %Y")
#echo $(date +"%Hh%M|%d/%m/%y")
echo $(date +"󰃭 %d-%m  %Hh%M")

#Credits to https://stackoverflow.com/users/1638350/atevm
# Who comment on https://stackoverflow.com/questions/40607925/date-format-in-bash-cases
}
print_weather(){
	echo -e $(cat $HOME/.local/share/weather.txt)
}
print_coffee(){
  if [[ $(xset q | grep "DPMS is " | awk '{ print $3 }') = "Disabled" ]];
  then
  echo -e "☕" 
  else 
  echo -e ""
  fi
}

print_caps(){
  if [[ $(xset q | grep Caps | awk '{ print $4 }') = "on" ]];
  then
  echo -e " 󰬈 " 
  else 
  echo -e " 󰯫 "
  fi
}

print_num(){
  if [[ $(xset q | grep Num | awk '{ print $8 }') = "on" ]];
  then
  echo -e "󰎤 " 
  else 
  echo -e "󰎦 "
  fi
}

print_mem(){
	memfree=$(($(grep -m1 'MemAvailable:' /proc/meminfo | awk '{print $2}') / 1024))
	echo -e "󰍛 $memfree"
}
#
print_bat(){
	hash acpi || return 0
	onl="$(grep "on-line" <(acpi -V))"
	charge="$(awk '{ sum += $1 } END { print sum }' /sys/class/power_supply/BAT0/capacity)"
	if test -z "$onl"
	then
		# suspend when we close the lid
		#systemctl --user stop inhibit-lid-sleep-on-battery.service
    if [[ ${charge} -lt 50  ]];
    then
      echo -e "󰁾 ${charge}%"

    elif  [[ ${charge} -lt 20  ]];
    then
      echo -e "󰁻 ${charge}%"
    else
		echo -e "󰁹 ${charge}%"
    fi
	else
		# On mains! no need to suspend
		#systemctl --user start inhibit-lid-sleep-on-battery.service
    if [[ ${charge} -lt 50 ]];
    then
      echo -e "󰢝  ${charge}%"
    elif [[ ${charge} -lt 20 ]];
    then
      echo -e "󰂆  ${charge}%"
    else
      echo -e "󰂄 ${charge}"
    fi
	fi
}

while true
do

	# Get new transmitted, received byte number values and current time
	get_bytes

	# Calculates speeds
	vel_recv=$(get_velocity $received_bytes $old_received_bytes $now)
	vel_trans=$(get_velocity $transmitted_bytes $old_transmitted_bytes $now)


	xsetroot -name "$(print_caps)$(print_num) $(print_mem)mb $(print_volume) $(print_mic) $(print_bat) $vel_recv↓$(print_wifi)↑$vel_trans $(print_weather) $(print_date) $(print_coffee)"

	# Update old values to perform new calculations
	old_received_bytes=$received_bytes
	old_transmitted_bytes=$transmitted_bytes
	old_time=$now
	sleep 1; 

done

